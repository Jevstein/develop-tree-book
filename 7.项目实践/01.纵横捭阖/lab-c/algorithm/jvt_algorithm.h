/*
 *  algorithm.h 
 *  algorithm
 *
 *  Created by Jevstein on 2018/7/24 18:02.
 *  Copyright @ 2018year Jevstein. All rights reserved.
 *
 * 位运算总结：
 *      1.&按位与:「两个相应的二进制位为1 ? 1 : 0」，e.g: 0011 & 0101 = 0001
 *        用途:
 *           1)清零: 新数相应位设为0，与原数按位与,    e.g: 1010 & 1000 = 1000（后3位清零）
 *           2)取指定位: 新数相应位设为1，与原数按位与，e.g: 1010 & 0011 = 0010（取后2位）
 *           3)判断类型是否存在: if (x & (0 << 1)) //判断类型为(0 << 1)是否存在
 *      2.|按位或:「两个相应的二进制位只要一个为1 ? 1 : 0」， e.g: 0011 | 0101 = 0111
 *        用途:
 *           1)增加类型: x |= (0 << 1); //增加类型(0 << 1)
 *      3.^按位异或:「参加运算的两个二进制位值相同 ? 0 : 1」，e.g: 0011 & 0101 = 0110
 *        用途:
 *           1)不用临时变量交换两数: ａ＝a∧b; ｂ＝b∧a; ａ＝a∧b;
 *        注: 异或操作中0是单位元，任何数与1异或相当于取反
 *      4.～取反:「~为一元运算符，顾名思义二进制相应位将0变1，将1变0」，e.g: ～0011 = 1100
 *        用途:
 *      5.<<左移:「将一个数的各二进制位左移N位，左端移除位舍弃，右补0。非负数」，e.g: 0011 << 2 = 1100
 *        用途:
 *           1)创造新数: x = 1 << 3;
 *      6.>>右移:「将一个数的各二进制位右移N位，右端移除位舍弃，左补0。无符号数」，e.g: 0011 >> 2 = 0000
 *        用途:
 * 			 1)除数，e.g: x/32 = x >> 5
 * 			 2)余数, e.g: x%32 = x & 1f
 *      ------------------------------------------------------------------------------------------------
 *		1.原码：一个整数按绝对值大小转换成的二进制数称为原码
 *		2.反码：将二进制数按位取反，所得的新二进制数称为原二进制数的反码（取反操作：1变0, 0变1)
 *		3.补码: 反码 + 1
 *		4.负数: 负数以其正值的补码形式表达，方法为其绝对值求反加一。最高位表示符号位,0为"正"，1为'负'
 *        例如: -100的绝对值为100
 *				100原码：0000 0000 0110 0100
 *				100反码：1111 1111 1001 1011
 *				100补码：1111 1111 1001 1100 == 1111 1111 1001 1011（反码） + 1
 *			 ∴-100二进制表示为：1111 1111 1001 1100
 */

#ifndef _JVT_ALGORITHM_H_
#define _JVT_ALGORITHM_H_

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

// min
#ifndef JVT_MIN
#	define JVT_MIN(a,b) (((a) < (b)) ? (a) : (b))
#endif			    
// max			    
#ifndef JVT_MAX		    
#	define JVT_MAX(a,b) (((a) > (b)) ? (a) : (b))
#endif

typedef int JVT_KEY_TYPE;

typedef struct _jvt_datas
{
	JVT_KEY_TYPE *data;
	int size;
} jvt_datas_t;


/************************************************************************/
/* 1.declare                                                            */
/************************************************************************/
void jvt_swap(int *a, int *b);//交换




/************************************************************************/
/* 2.implement                                                          */
/************************************************************************/
void jvt_swap(int *a, int *b)
{
	if (*a == *b)
		return;

	//set: a=2, b=3;  that is: a=10, b=11

	/**
	 * 1.bit operation
	 * mechanism:
	 *     1).a = a ^ b; b = a ^ b;  =>  b = (a ^ b) ^ b = a ^ b ^ b
	 *                               =>  b = a ^ 0 = a
	 *     2).a = a ^ b;             =>  a = (a ^ b) ^ a = b
	 */
	{
		*a = *a ^ *b; // [2-10]: a = 10 ^ 11 = 01 = 1; 
		*b = *a ^ *b; // [3-11]: b = 01 ^ 11 = 10 = 2;
		*a = *a ^ *b; // [1-01]: a = 01 ^ 10 = 11 = 3;
	}

	///**
	///* 2.math operation
	// */
	//{
	//	*a = *a + *b; // a = 2 + 3 = 5
	//	*b = *a - *b; // b = 5 - 3 = 2
	//	*a = *a - *b; // a = 5 - 2 = 3
	//}
}

#endif //_JVT_ALGORITHM_H_
