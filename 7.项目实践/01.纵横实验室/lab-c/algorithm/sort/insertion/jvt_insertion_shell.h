/*
 *  jvt_insertion_shell.h 
 *  jvt_insertion_shell
 *
 *  Created by Jevstein on 2018/7/30 19:40.
 *  Copyright @ 2018year Jevstein. All rights reserved.
 *
 *  希尔排序思想：
 *        "通过将比较的全部元素分为几个区域来提升插入排序的性能。这样让一个元素可以
 *     一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后
 *     一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入
 *     排序较快）。"
 *         回想一下直接插入排序过程，排序过程中，我们可以设置一条线，左边是排好序的，
 *     右边则是一个一个等待排序，若最小的那个值在最右边，则排这个最小值的时候，需要
 *     将所有元素向右边移动一位。
 *         为了减少这样的移位，希尔排序就被发明出来了。通过设置一个间隔，对同样间隔
 *     的数的集合进行插入排序，此数集合中的元素移位的长度是以间隔的长度为准，这样就
 *     实现了大步位移。但最后需对元素集合进行一次直接插入排序，所以最后的间隔一定是1。
 *         **简单例子分析：
 *         0.待排序数组： { 6, 5, 3, 1, 8, 7, 2, 4, 9, 0 }
 *         1.1.第一次步长h = 4,则数组按步长可拆成4个小数组([0]6的意思是下标[0]的值为6)
 *            { [0]6, [4]8, [8]9 }
 *            { [1]5, [5]7, [9]0 }
 *            { [2]3, [6]2 }
 *            { [3]1, [7]4 }
 *         1.2.对这4个小数组分别进行插入排序后，4个小数组变成：
 *            { [0]6, [4]8, [8]9 }
 *            { [1]0, [5]5, [9]7 }
 *            { [2]2, [6]3 }
 *            { [3]1, [7]4 }
 *         1.3.合并起来就是：{ 6, 0, 2, 1, 8, 5, 3, 4, 9, 7 }
 *         2.第二次步长h = 1,则数组按照步长只有1个数组：   { 6, 0, 2, 1, 8, 5, 3, 4, 9, 7 }
 *           对这个数组进行一次插入排序后，最终顺序就成为：{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
 *
 *     *.复杂度： t=O(nlgn), [O(n^1.25), O(nlg^2n)]; s=O(1); 时间复杂度根据步长而不同
 *     *.不稳定
 *	   *.in-place
 */

#ifndef _JVT_SHELL_H_
#define _JVT_SHELL_H_
#include "../../jvt_algorithm.h"

//希尔排序
void jvt_insertion_sort_shell(jvt_datas_t *datas);


void jvt_insertion_sort_shell(jvt_datas_t *datas)
{
	int h = 1; /* 关于步长，取值没有统一标准，必须小于size，最后一次步长要为1 */

	// 1.计算首次步长
	while (h < datas->size / 3)
		h = 3 * h + 1;

	while (h >= 1)
	{
		for (int i = h; i < datas->size; ++i)
		{
			// 2.将data_[i]插入到{ data[i-h]、data[i-2h]、data[i-3h]、... }中
			for (int j = i; (j >= h) && (datas->data[j] < datas->data[j - h]); j -= h)
			{//相隔步长为h的两个数，若'后面的值(data[j - h]) < 前面的值(data[j])'，则交换
				jvt_swap(&datas->data[j], &datas->data[j - h]);
			}
		}

		// 3.计算下一轮步长
		h = h / 3;
	}
}


#endif //_JVT_SHELL_H_
